<?php declare(strict_types=1);

namespace Condenast\BasicApiBundle\ApiDoc;

use EXSyst\Component\Swagger\Schema;
use Nelmio\ApiDocBundle\Model\Model;
use Nelmio\ApiDocBundle\ModelDescriber\ModelDescriberInterface;
use Symfony\Component\Validator\ConstraintViolationListInterface;

class ConstraintViolationListModelDescriber implements ModelDescriberInterface
{
    public function describe(Model $model, Schema $schema): void
    {
        $schema->setRequired([
            'type',
            'title',
            'violations',
        ]);

        $properties = $schema->getProperties();

        $properties
            ->get('type')
            ->setType('string')
            ->setDescription('A URI reference that identifies the problem type');

        $properties
            ->get('title')
            ->setType('string')
            ->setDescription('A short, human-readable summary of the problem type');

        $properties
            ->get('status')
            ->setType('integer')
            ->setDescription('The HTTP status code generated by the origin server for this occurrence of the problem');

        $properties
            ->get('detail')
            ->setType('string')
            ->setDescription('A human-readable explanation specific to this occurrence of the problem');

        $properties
            ->get('instance')
            ->setType('string')
            ->setDescription('A URI reference that identifies the specific occurrence of the problem');

        $violationProperties = $properties
            ->get('violations')
            ->setType('array')
            ->setDescription('Array of constraint violations')
            ->getItems()
            ->setRequired([
                'propertyPath',
                'title',
                'parameters',
            ])
            ->getProperties()
        ;

        $violationProperties
            ->get('propertyPath')
            ->setType('string')
            ->setDescription('The path to a property whose value violates the constraint');

        $violationProperties
            ->get('title')
            ->setType('string')
            ->setDescription('Constraint violation message');

        $violationProperties
            ->get('parameters')
            ->setType('string')
            ->setDescription('Constraint violation message parameters');

        $violationProperties
            ->get('type')
            ->setType('string')
            ->setDescription('Constraint type');
    }

    public function supports(Model $model): bool
    {
        $className = $model->getType()->getClassName();

        return null !== $className && \is_a($className, ConstraintViolationListInterface::class, true);
    }
}
