<?php declare(strict_types=1);

namespace Condenast\BasicApiBundle\ApiDoc;

use Nelmio\ApiDocBundle\Model\Model;
use Nelmio\ApiDocBundle\ModelDescriber\ModelDescriberInterface;
use Nelmio\ApiDocBundle\OpenApiPhp\Util;
use OpenApi\Annotations as OA;
use Symfony\Component\Validator\ConstraintViolationListInterface;

class ConstraintViolationListModelDescriber implements ModelDescriberInterface
{
    public function describe(Model $model, OA\Schema $schema): void
    {
        Util::merge(
            $schema,
            [
                'type' => 'object',
                'required' => ['type', 'title', 'violations'],
            ]
        );

        Util::merge(
            Util::getProperty($schema, 'type'),
            [
                'type' => 'string',
                'description' => 'A URI reference that identifies the problem type',
            ]
        );

        Util::merge(
            Util::getProperty($schema, 'title'),
            [
                'type' => 'string',
                'description' => 'A short, human-readable summary of the problem type',
            ]
        );

        Util::merge(
            Util::getProperty($schema, 'status'),
            [
                'type' => 'integer',
                'description' => 'The HTTP status code generated by the origin server for this occurrence of the problem',
            ]
        );

        Util::merge(
            Util::getProperty($schema, 'detail'),
            [
                'type' => 'string',
                'description' => 'A human-readable explanation specific to this occurrence of the problem',
            ]
        );

        Util::merge(
            Util::getProperty($schema, 'instance'),
            [
                'type' => 'string',
                'description' => 'A URI reference that identifies the specific occurrence of the problem',
            ]
        );

        Util::merge(
            Util::getProperty($schema, 'violations'),
            [
                'type' => 'array',
                'description' => 'Array of constraint violations',
            ]
        );

        /** @var OA\Items $violationItems */
        $violationItems = Util::getChild(Util::getProperty($schema, 'violations'), OA\Items::class);

        Util::merge(
            $violationItems,
            [
                'required' => ['propertyPath', 'title', 'parameters'],
            ]
        );

        Util::merge(
            Util::getProperty($violationItems, 'propertyPath'),
            [
                'type' => 'string',
                'description' => 'The path to a property whose value violates the constraint',
            ]
        );

        Util::merge(
            Util::getProperty($violationItems, 'title'),
            [
                'type' => 'string',
                'description' => 'Constraint violation message',
            ]
        );

        Util::merge(
            Util::getProperty($violationItems, 'parameters'),
            [
                'type' => 'string',
                'description' => 'Constraint violation message parameters',
            ]
        );

        Util::merge(
            Util::getProperty($violationItems, 'type'),
            [
                'type' => 'string',
                'description' => 'Constraint type',
            ]
        );
    }

    public function supports(Model $model): bool
    {
        $classname = $model->getType()->getClassName();
        return null !== $classname && \is_a($classname, ConstraintViolationListInterface::class, true);
    }
}
